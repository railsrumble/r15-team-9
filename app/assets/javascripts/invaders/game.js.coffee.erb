player = ''
bulletTime = 0
initialPlayerPosition = 512
lives = 4
score = 0
level = 0
style = { font: "32px silkscreen", fill: "#666666", align: "center" }
boldStyle = { font: "bold 32px silkscreen", fill: "#ffffff", align: "center" }
aliens = {}
livesText = ''
scoreText = ''
highScoreText = ''
cursors = []
fireButton = ''
restartButton = ''
bullets = ''
bombs = ''
bombSound = ''
shootSound = ''
explodeSound = ''
explosions = ''
gameOverText = ''
restartText = ''
canvasWidth = 1024
alienImageSize = 30
alienSize = 48
aliensPerRow = 16
leapMotionController = {}

Leap.loop (frame) ->
  if (frame.hands.length)
    leapMotionController.enabled = true
    leapMotionController.handPalmPositionX = (frame.hands[0].palmPosition[0] + 255) / 512.0
    leapMotionController.handIsOpen = frame.hands[0].grabStrength < 0.5
  else
    leapMotionController.enabled = false

borderSpace = ->
  canvasWidth - (alienSize * (aliensPerRow - 1))

preload = ->
  game.load.image('ship', "<%= image_path('ship.png') %>")
  game.load.image('bullet', "<%= image_path('bullet.png') %>")
  game.load.image("alien0", "<%= image_path('alien0.png') %>")
  game.load.image("alien1", "<%= image_path('alien1.png') %>")
  game.load.image("alien2", "<%= image_path('alien2.png') %>")
  game.load.image("alien3", "<%= image_path('alien3.png') %>")
  game.load.image("alien4", "<%= image_path('alien4.png') %>")
  game.load.image("alien5", "<%= image_path('alien5.png') %>")
  game.load.image('bomb', "<%= image_path('bomb.png') %>")
  game.load.spritesheet('explosion', "<%= image_path('explosion.png') %>", 80, 80)
  game.load.audio('shoot', "<%= asset_path('shoot.wav') %>")
  game.load.audio('explode', "<%= asset_path('explode.wav') %>")
  game.load.audio('bomb', "<%= asset_path('bomb.wav') %>")

create = ->
  game.physics.startSystem(Phaser.Physics.ARCADE)

  # Initialize player
  player = game.add.sprite(initialPlayerPosition, 540, 'ship')
  player.anchor.setTo(0.5, 0.5)
  game.physics.enable(player, Phaser.Physics.ARCADE)
  player.body.bounce.x = 0.5
  player.body.collideWorldBounds = true

  # Initialize bullets
  bullets = game.add.group()
  bullets.enableBody = true
  bullets.physicsBodyType = Phaser.Physics.ARCADE
  bullets.createMultiple(5, 'bullet')
  bullets.setAll('anchor.x', 0.5)
  bullets.setAll('anchor.y', 1)
  bullets.setAll('checkWorldBounds', true)
  bullets.setAll('outOfBoundsKill', true)

  # Initialize aliens
  createAliens()
  animateAliens()

  # Initialize bombs
  bombs = game.add.group()
  bombs.enableBody = true
  bombs.physicsBodyType = Phaser.Physics.ARCADE
  bombs.createMultiple(10, 'bomb')
  bombs.setAll('anchor.x', 0.5)
  bombs.setAll('anchor.y', 0.5)
  bombs.setAll('checkWorldBounds', true)
  bombs.setAll('outOfBoundsKill', true)

  # Initialize explosions
  explosions = game.add.group()
  explosions.createMultiple(10, 'explosion')
  explosions.setAll('anchor.x', 0.5)
  explosions.setAll('anchor.y', 0.5)
  explosions.forEach(setupExplosion, this)

  # Text bits
  livesText = game.add.text(game.world.bounds.width - 16, 16, "LIVES: " + lives, style)
  livesText.anchor.set(1, 0)

  scoreText = game.add.text(16, 16, '', style)
  scoreText.anchor.set(0, 0)

  updateLevel()

  updateScore()

  # Initialize sounds
  shootSound = game.add.audio('shoot', 1, false)
  explodeSound = game.add.audio('explode', 1, false)
  bombSound = game.add.audio('bomb', 1, false)

  # Setup controls
  cursors = game.input.keyboard.createCursorKeys()
  fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR)
  restartButton = game.input.keyboard.addKey(Phaser.Keyboard.S)

update = ->
  playerMovement()

  # Firing?
  if (leapMotionController.handIsOpen && player.alive)
    fireBullet()
  if (fireButton.isDown && player.alive)
    fireBullet()

  # Restart?
  if (restartButton.isDown && lives == 0)
    restartGame()

  # Handle aliens dropping bombs
  handleBombs()

  game.physics.arcade.overlap(bullets, aliens, bulletHitsAlien, null, this)
  game.physics.arcade.overlap(bombs, player, bombHitsPlayer, null, this)

  # Update score
  $('input#match_score').val(score)

setupExplosion = (explosion)->
  explosion.animations.add('explode')

playerMovement = ->
  maxVelocity = 500

  if (leapMotionController.enabled)
    player.body.position.x = leapMotionController.handPalmPositionX * 1024
  else
    if (cursors.left.isDown && player.body.velocity.x > -maxVelocity)
      # Move to the left
      player.body.velocity.x -= 20

    else if (cursors.right.isDown && player.body.velocity.x < maxVelocity)
      # Move to the right
      player.body.velocity.x += 20

    else
      # Slow down
      if (player.body.velocity.x > 0)
        player.body.velocity.x -= 4
      else if (player.body.velocity.x < 0)
        player.body.velocity.x += 4

fireBullet = ->
  if (game.time.now > bulletTime)
    bullet = bullets.getFirstExists(false)

    if (bullet)
      # And fire it
      shootSound.play()
      bullet.reset(player.x, player.y - 16)
      bullet.body.velocity.y = -400
      bullet.body.velocity.x = player.body.velocity.x / 4
      bulletTime = game.time.now + 280

bulletHitsAlien = (bullet, alien) ->
  bullet.kill()
  explode(alien)
  score += 10
  updateScore()

  if (aliens.countLiving() == 0)
    newWave()

bombHitsPlayer = (bomb, player) ->
  bomb.kill()
  explode(player)
  lives -= 1
  updateLivesText()
  if (lives > 0)
    respawnPlayer()
  else
    gameOver()

explode = (entity) ->
  entity.kill()

  # And create an explosion :)
  explodeSound.play()
  explosion = explosions.getFirstExists(false)
  explosion.reset(entity.body.x + (entity.width / 2), entity.body.y + (entity.height / 2))
  explosion.play('explode', 30, false, true)

updateLivesText = ->
  livesText.text = "LIVES: " + lives

updateLevel = ->
  level += 1
  levelText = game.add.text((game.world.bounds.width / 2), (game.world.bounds.height / 2), "Level: " + level, style)
  levelText.anchor.set(0.5, 0.5)
  setTimeout(->
    levelText.destroy()
  , 1000)

updateScore = ->
  scoreText.text = pad(score, 6)

respawnPlayer = ->
  player.body.x = initialPlayerPosition
  setTimeout( ->
    player.revive()
  , 1000)

newWave = ->
  setTimeout(->
    bombs.createMultiple(10 * level, 'bomb')
    updateLevel()
    aliens.removeAll()
    createAliens()
    animateAliens()
    levelText.remove()
  , 1000)

restartGame = ->
  gameOverText.destroy()
  restartText.destroy()
  lives = 3
  score = 0
  updateScore()
  updateLivesText()
  respawnPlayer()
  newWave()

gameOver = ->
  setTimeout(->
    gameOverText = game.add.text(game.world.centerX, game.world.centerY, "GAME OVER", boldStyle)
    gameOverText.anchor.set(0.5, 0.5)
    restartText = game.add.text(game.world.centerX, game.world.height - 16, "PRESS 'S' TO RESTART", style)
    restartText.anchor.set(0.5, 1)
  , 1000)

createAliens = ->
  aliens = game.add.group()
  aliens.enableBody = true
  aliens.physicsBodyType = Phaser.Physics.ARCADE

  y = 0
  while y < 6
    x = 0
    while x < aliensPerRow
      alien = aliens.create(x * alienSize, y * alienSize, "alien#{y}")
      alien.anchor.setTo 0.5, 0.5
      alien.body.moves = false
      x++
    y++

  aliens.x = alienImageSize
  aliens.y = 96

  aliens.forEach (alien, i) ->
    game.add.tween(alien).to( { y: alien.body.y + 5 }, 500, Phaser.Easing.Sinusoidal.InOut, true, game.rnd.integerInRange(0, 500), 1000, true)

animateAliens = ->
  # All this does is basically start the invaders moving. Notice we're moving the Group they belong to, rather than the invaders directly.
  tween = game.add.tween(aliens).to( { x: (borderSpace() - alienImageSize) }, 3000, Phaser.Easing.Sinusoidal.InOut, true, 0, 1000, true)

  # When the tween loops it calls descend
  tween.onLoop.add(descend, this)

handleBombs = ->
  aliens.forEachAlive((alien)->
    chanceOfDroppingBomb = game.rnd.integerInRange(0, 20 * aliens.countLiving())
    if (chanceOfDroppingBomb == 0)
      dropBomb(alien)
  , this)

dropBomb = (alien)->
  bomb = bombs.getFirstExists(false)

  if (bomb && player.alive)
    bombSound.play()
    # And drop it
    bomb.reset(alien.x + aliens.x, alien.y + aliens.y + 16)
    bomb.body.velocity.y = +100
    bomb.body.gravity.y = 250

descend = ->
  if (player.alive)
    game.add.tween(aliens).to( { y: aliens.y + 8 }, 2500, Phaser.Easing.Linear.None, true, 0, 0, false)

pad = (number, length) ->
  str = '' + number
  while (str.length < length)
    str = '0' + str
  return str

if $("[data-game=true]").length > 0
  game = new Phaser.Game(canvasWidth, 576, Phaser.AUTO, 'game', { preload: preload, create: create, update: update }, true)
